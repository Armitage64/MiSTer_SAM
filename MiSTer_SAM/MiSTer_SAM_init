#!/bin/bash
trap "" HUP
trap "" TERM

start()
{
	#======== Start ========
	echo "Starting MiSTer Super Attract Mode... "
	
	#========= VARIABLES =========
	samtimeout=5
	mrsampath="/media/fat/Scripts/.MiSTer_SAM"
		
	# Read INI, Check for mount point presence
	while ! test -d /media/fat/
	do
		sleep 1
		count=`expr $count + 1`
		if test $count -eq 30; then
			echo "Mount timed out!"
        		exit 1
   		fi
	done
	if [ -f /media/fat/Scripts/MiSTer_SAM.ini ]; then
		. /media/fat/Scripts/MiSTer_SAM.ini
		IFS=$'\n'
	fi
	
	# Remove trailing slash from paths
	for var in mrsampath; do
		declare -g ${var}="${!var%/}"
	done

	
	# Spawn Joystick monitoring process per detected joystick device
	for joystick in /dev/input/js*; do
		${mrsampath}/MiSTer_SAM_joy.sh "${joystick}" &
	done

	# Detect joystick device changes
	${mrsampath}/MiSTer_SAM_joy_change.sh &
	
	# Spawn Mouse monitoring process
	${mrsampath}/MiSTer_SAM_mouse.sh &
	
	# Spawn Keyboard monitoring per detected keyboard device
	for keyboard in $(dmesg --decode --level info --kernel --color=never --notime --nopager | grep -e 'Keyboard' | grep -Eo 'hidraw[0-9]+'); do
		${mrsampath}/MiSTer_SAM_keyboard.sh "${keyboard}" &
	done
	# Detect keyboard device changes
	# TODO
	
	# Startup done
	echo "DONE"
	echo "Press ENTER to continue"


	# Wait for system clock synchronization
	#sleep 60
	# Reset activity logs
	rm -f /tmp/.SAM_Joy_Activity /tmp/.SAM_Mouse_Activity /tmp/.SAM_Keyboard_Activity /tmp/.SAM_Joy_Change
	touch /tmp/.SAM_Joy_Activity /tmp/.SAM_Mouse_Activity /tmp/.SAM_Keyboard_Activity /tmp/.SAM_Joy_Change
	
	# Check if system is idle for ${timeoutmins} - start Attract Mode if we are
	while :; do
		# If we detected a change to connected joysticks, compare to running processes, make list of missing devices
		# Does not remove stale device monitoring
		if [ -s /tmp/.SAM_Joy_Change ]; then
			jsdevices=""
			jsmonitors=""
			for jsdevice in /dev/input/js*; do jsdevices+="${jsdevice} "; done
			for jsdevice in $(ps -o args | grep -oE 'js[0-9]' | sort -u); do jsmonitors+="/dev/input/${jsdevice} "; done
			for jsdevice in ${jsmonitors}; do jsdevices="${jsdevices/${jsdevice}} "; done
		fi

		# Add newly detected joystick monitoring
		for joystick in ${jsdevices}; do
			${mrsampath}/MiSTer_SAM_joy.sh "${joystick}" &
		done

		if [ "$(/bin/find /tmp/.SAM_Joy_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Mouse_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Keyboard_Activity -mmin +${samtimeout})" ]; then
			# Reset activity triggers
			echo "" |>/tmp/.SAM_Joy_Activity
			echo "" |>/tmp/.SAM_Joy_Change
			echo "" |>/tmp/.SAM_Mouse_Activity
			echo "" |>/tmp/.SAM_Keyboard_Activity
			"${mrsampath}/MiSTer_SAM.sh"
			# Reset activity triggers
			echo "" |>/tmp/.SAM_Joy_Activity
			echo "" |>/tmp/.SAM_Joy_Change
			echo "" |>/tmp/.SAM_Mouse_Activity
			echo "" |>/tmp/.SAM_Keyboard_Activity
		fi
		sleep 3
	done
}

stop() 
{
	echo -n "Stopping MiSTer SAM... "
	echo "OK"
	echo "Press ENTER to continue"
}

# Kill running process
if [ ! -z "$(pidof -o $$ $(basename ${0}))" ]; then
	echo ""
	echo "Removing other running instances of $(basename ${0})..."
	kill -9 $(pidof -o $$ $(basename ${0})) &>/dev/null
fi

# Kill old activity processes
killall -q -9 MiSTer_SAM_joy.sh &>/dev/null
killall -q -9 MiSTer_SAM_mouse.sh &>/dev/null
killall -q -9 MiSTer_SAM_keyboard.sh &>/dev/null
killall -q -9 xxd &>/dev/null
killall -q -9 inotifywait &>/dev/null

# Parse command line
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: /etc/init.d/S93mistersam {start|stop|restart}"
        exit 1
        ;;
esac
exit 0
